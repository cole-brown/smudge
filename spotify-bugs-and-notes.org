#+TITLE:       Spotify Bugs and Notes
#+AUTHOR:      Cole Brown
#+EMAIL:       git@spydez.com
#+DATE:        [2019-11-13 Wed]


* Bug: On first action after enable spotify/website reply ok.

fix: get rid of unused arg in parameters.

** bug: wrong-number-of-arguments

Debugger entered--Lisp error: (wrong-number-of-arguments ((t) (json keyword) "Gets device list from \"/v1/me/player/devices\" endpoint of Spotify Connect API.\n\nJSON must be a json reply formatted hash-table (by json.el) from\nSpotify Connect API. See:\nhttps://developer.spotify.com/documentation/web-api/guides/using-connect-web-api/\n\nReturns list of devices from the json. These will have\n`spotify--api-device-full' fields.\n" (let* ((json (and t json)) (devices (and json (gethash 'devices json)))) (if devices devices nil))) 1)
  spotify--api-devices(#<hash-table equal 1/65 0x21284ad>)
  (and t (spotify--api-devices json))
  (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))
  (closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device))))(#<hash-table equal 1/65 0x21284ad>)
  funcall((closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) #<hash-table equal 1/65 0x21284ad>)
  (progn (funcall callback json))
  (if callback (progn (funcall callback json)))
  (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))
  (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))
  (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))
  (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))))
  (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))
  (closure ((is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") (is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil))))))((:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  apply((closure ((is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") (is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))) (:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  url-http-activate-callback()
  url-http-chunked-encoding-after-change-function(743 748 5)
  url-http-generic-filter(#<process api.spotify.com<14>> "0\015\n\015\n")
