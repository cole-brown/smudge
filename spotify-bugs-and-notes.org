#+TITLE:       Spotify Bugs and Notes
#+AUTHOR:      Cole Brown
#+EMAIL:       git@spydez.com
#+DATE:        [2019-11-13 Wed]


* Bug: On first action after enable spotify/website reply ok & active device.


** wrong-type-argument symbolp

Debugger entered--Lisp error: (wrong-type-argument symbolp ((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)))
  symbol-name(((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)))
  (error (concat "spotify--api-json-has-field: " "field '%s' unknown for type '%s'. Choose from: %s") field (symbol-name type) type)
  (progn (error (concat "spotify--api-json-has-field: " "field '%s' unknown for type '%s'. Choose from: %s") field (symbol-name type) type))
  (if (not (member field type)) (progn (error (concat "spotify--api-json-has-field: " "field '%s' unknown for type '%s'. Choose from: %s") field (symbol-name type) type)))
  spotify--api-json-get-field(((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)) #<hash-table equal 10/65 0x10e7955> device)
  (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)
  (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)")))
  (if type (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)"))) (error "spotify--api-player-status: if-let failed: %S %S->%S %S" (null json) keyword type "(is keyword in `spotify--keyword->api-field'?)"))
  (let* ((json (and t json)) (type (and json (nth 1 (assoc keyword spotify--keyword->api-field))))) (if type (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)"))) (error "spotify--api-player-status: if-let failed: %S %S->%S %S" (null json) keyword type "(is keyword in `spotify--keyword->api-field'?)")))
  spotify--api-player-status(#<hash-table equal 10/65 0x10e7955> :volume)
  (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))
  (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true))))
  (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))))
  (if (and (member field-true spotify-player-status-fields) (or (null translate-entry) (eq (nth 0 translate-entry) (nth 1 translate-entry)))) (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true))))))
  (let ((translate-entry (assoc field-true spotify--player-status-translators))) (if (and (member field-true spotify-player-status-fields) (or (null translate-entry) (eq (nth 0 translate-entry) (nth 1 translate-entry)))) (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))))))
  spotify--player-status-field-raw(#<hash-table equal 10/65 0x10e7955> :volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (let* ((status (spotify--normalized-status-type status)) (dictionary (or dictionary spotify--player-status-translators)) (trans-entry (assoc field dictionary)) (field-true (or (nth 1 trans-entry) field)) (value (spotify--player-status-field-raw status field-true dictionary))) (if (not trans-entry) value (spotify--player-status-translate field field-true value dictionary)))
  (if (not (member field spotify-player-status-fields)) (error "spotify--player-status: field '%s' unknown. Choose from: %s" field spotify-player-status-fields) (let* ((status (spotify--normalized-status-type status)) (dictionary (or dictionary spotify--player-status-translators)) (trans-entry (assoc field dictionary)) (field-true (or (nth 1 trans-entry) field)) (value (spotify--player-status-field-raw status field-true dictionary))) (if (not trans-entry) value (spotify--player-status-translate field field-true value dictionary))))
  spotify--player-status-field(#<hash-table equal 10/65 0x10e7955> :volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (let* ((status (spotify--cache-get-status-if nil))) (spotify--player-status-field status field dictionary))
  spotify-player-status-field(:volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (and t (spotify-player-status-field :volume spotify--player-status-translators))
  (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil))
  (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil)))
  (if spotify-cache-player-status-enabled (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil))))
  (condition-case err (if spotify-cache-player-status-enabled (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil)))) ((debug error) (message "Spotify status update error: %S" err) nil))
  spotify--controller-status-updated()
  run-hooks(spotify--cache-player-status-hook)
  spotify--player-status-caching-callback((closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) #<hash-table equal 10/65 0x10e7955>)
  (closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status))(#<hash-table equal 10/65 0x10e7955>)
  funcall((closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) #<hash-table equal 10/65 0x10e7955>)
  (progn (funcall callback json))
  (if callback (progn (funcall callback json)))
  (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))
  (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))
  (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))
  (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))))
  (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))
  (closure ((is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") (is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil))))))((:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  apply((closure ((is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") (is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))) (:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  url-http-activate-callback()
  url-http-chunked-encoding-after-change-function(1518 1523 5)
  url-http-generic-filter(#<process api.spotify.com<10>> "0\015\n\015\n")


* Bug: On first action after enable spotify/website reply ok.

fix: get rid of unused arg in parameters.

** bug: wrong-number-of-arguments

Debugger entered--Lisp error: (wrong-number-of-arguments ((t) (json keyword) "Gets device list from \"/v1/me/player/devices\" endpoint of Spotify Connect API.\n\nJSON must be a json reply formatted hash-table (by json.el) from\nSpotify Connect API. See:\nhttps://developer.spotify.com/documentation/web-api/guides/using-connect-web-api/\n\nReturns list of devices from the json. These will have\n`spotify--api-device-full' fields.\n" (let* ((json (and t json)) (devices (and json (gethash 'devices json)))) (if devices devices nil))) 1)
  spotify--api-devices(#<hash-table equal 1/65 0x21284ad>)
  (and t (spotify--api-devices json))
  (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))
  (closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device))))(#<hash-table equal 1/65 0x21284ad>)
  funcall((closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) #<hash-table equal 1/65 0x21284ad>)
  (progn (funcall callback json))
  (if callback (progn (funcall callback json)))
  (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))
  (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))
  (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))
  (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))))
  (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))
  (closure ((is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") (is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil))))))((:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  apply((closure ((is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") (is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))) (:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  url-http-activate-callback()
  url-http-chunked-encoding-after-change-function(743 748 5)
  url-http-generic-filter(#<process api.spotify.com<14>> "0\015\n\015\n")
