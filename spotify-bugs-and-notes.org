#+TITLE:       Spotify Bugs and Notes
#+AUTHOR:      Cole Brown
#+EMAIL:       git@spydez.com
#+DATE:        [2019-11-13 Wed]

[[--now--]]

* Bug:

<<--now-->>


Debugger entered--Lisp error: (error "spotify--api-status-object-get: checks failed. nil nil t")
  signal(error ("spotify--api-status-object-get: checks failed. nil nil t"))
  error("spotify--api-status-object-get: checks failed. %S %S %S" nil nil t)
  (if (or (null object) (not (listp key)) (not (eq (nth 1 key) type))) (error "spotify--api-status-object-get: checks failed. %S %S %S" (null object) (not (listp key)) (not (eq (nth 1 key) type))) (let* ((object-def (nth 1 key)) (field (nth 2 key)) (value (gethash field object)) (value-check (assoc field type))) (if (or (null object-def) (null field) (null value-check)) (error "spotify--api-status-object-get: setup failed. %S %S %S (value: %S)" object-def field value-check value) (cond ((and (functionp value-check) (funcall value-check value)) value) ((eq value-check :spotify--no-impl) nil) ((and (listp value-check) (eq (nth 0 value-check) :boolean)) (let ((false (nth 1 value-check)) (comparator (or (nth 2 value-check) (function eq)))) (not (funcall comparator value false)))) (t nil)))))
  spotify--api-object-get-field(#<hash-table equal 7/65 0x201c125> (:volume spotify--api-device-full volume_percent) ((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)))
  spotify--api-player-status-field(#<hash-table equal 7/65 0x201c125> :volume)
  (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)")))
  (if type (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)"))) (error "spotify--api-player-status: if-let failed: %S %S->%S %S" (null json) keyword type "(is keyword in `spotify--keyword->api-field'?)"))
  (let* ((json (and t json)) (type (and json (nth 1 (assoc keyword spotify--keyword->api-field))))) (if type (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)"))) (error "spotify--api-player-status: if-let failed: %S %S->%S %S" (null json) keyword type "(is keyword in `spotify--keyword->api-field'?)")))
  spotify--api-player-status(#<hash-table equal 10/65 0x20179c5> :volume)
  (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))
  (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true))))
  (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))))
  (if (and (member field-true spotify-player-status-fields) (or (null translate-entry) (eq (nth 0 translate-entry) (nth 1 translate-entry)))) (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true))))))
  (let ((translate-entry (assoc field-true spotify--player-status-translators))) (if (and (member field-true spotify-player-status-fields) (or (null translate-entry) (eq (nth 0 translate-entry) (nth 1 translate-entry)))) (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))))))
  spotify--player-status-field-raw(#<hash-table equal 10/65 0x20179c5> :volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (let* ((status (spotify--normalized-status-type status)) (dictionary (or dictionary spotify--player-status-translators)) (trans-entry (assoc field dictionary)) (field-true (or (nth 1 trans-entry) field)) (value (spotify--player-status-field-raw status field-true dictionary))) (if (not trans-entry) value (spotify--player-status-translate field field-true value dictionary)))
  (if (not (member field spotify-player-status-fields)) (error "spotify--player-status: field '%s' unknown. Choose from: %s" field spotify-player-status-fields) (let* ((status (spotify--normalized-status-type status)) (dictionary (or dictionary spotify--player-status-translators)) (trans-entry (assoc field dictionary)) (field-true (or (nth 1 trans-entry) field)) (value (spotify--player-status-field-raw status field-true dictionary))) (if (not trans-entry) value (spotify--player-status-translate field field-true value dictionary))))
  spotify--player-status-field(#<hash-table equal 10/65 0x20179c5> :volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (let* ((status (spotify--cache-get-status-if nil))) (spotify--player-status-field status field dictionary))
  spotify-player-status-field(:volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (and t (spotify-player-status-field :volume spotify--player-status-translators))
  (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil))
  (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil)))
  (if spotify-cache-player-status-enabled (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil))))
  (condition-case err (if spotify-cache-player-status-enabled (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil)))) ((debug error) (message "Spotify status update error: %S" err) nil))
  spotify--controller-status-updated()
  run-hooks(spotify--cache-player-status-hook)
  spotify--player-status-caching-callback((closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) #<hash-table equal 10/65 0x20179c5>)
  (closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status))(#<hash-table equal 10/65 0x20179c5>)
  funcall((closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) #<hash-table equal 10/65 0x20179c5>)
  (progn (funcall callback json))
  (if callback (progn (funcall callback json)))
  (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))
  (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))
  (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))
  (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))))
  (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))
  (closure ((is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") (is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil))))))((:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  apply((closure ((is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") (is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))) (:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  url-http-activate-callback()
  url-http-content-length-after-change-function(4154 4953 799)
  url-http-generic-filter(#<process api.spotify.com<19>> "A\" ],\n    \"disc_number\" : 1,\n    \"duration_ms\" : 283733,\n    \"explicit\" : true,\n    \"external_ids\" : {\n      \"isrc\" : \"USUM71029031\"\n    },\n    \"external_urls\" : {\n      \"spotify\" : \"https://open.spotify.com/track/70ATm56tH7OrQ1zurYssz0\"\n    },\n    \"href\" : \"https://api.spotify.com/v1/tracks/70ATm56tH7OrQ1zurYssz0\",\n    \"id\" : \"70ATm56tH7OrQ1zurYssz0\",\n    \"is_local\" : false,\n    \"name\" : \"I Need A Doctor\",\n    \"popularity\" : 72,\n    \"preview_url\" : \"https://p.scdn.co/mp3-preview/24a0ffb0958feadc7007939efb6b438f22aec2bc?cid=e8bac12e1f4f4d63ab2b5557fd497492\",\n    \"track_number\" : 1,\n    \"type\" : \"track\",\n    \"uri\" : \"spotify:track:70ATm56tH7OrQ1zurYssz0\"\n  },\n  \"currently_playing_type\" : \"track\",\n  \"actions\" : {\n    \"disallows\" : {\n      \"resuming\" : true\n    }\n  },\n  \"is_playing\" : true\n}")
  read-from-minibuffer(#("pattern: " 0 9 (face helm-minibuffer-prompt)) nil (keymap (f13 lambda nil (interactive) (helm-select-nth-action 12)) (f12 lambda nil (interactive) (helm-select-nth-action 11)) (f11 lambda nil (interactive) (helm-select-nth-action 10)) (f10 lambda nil (interactive) (helm-select-nth-action 9)) (f9 lambda nil (interactive) (helm-select-nth-action 8)) (f8 lambda nil (interactive) (helm-select-nth-action 7)) (f7 lambda nil (interactive) (helm-select-nth-action 6)) (f6 lambda nil (interactive) (helm-select-nth-action 5)) (f5 lambda nil (interactive) (helm-select-nth-action 4)) (f4 lambda nil (interactive) (helm-select-nth-action 3)) (f3 lambda nil (interactive) (helm-select-nth-action 2)) (f2 lambda nil (interactive) (helm-select-nth-action 1)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . #f(compiled-function () (interactive nil) #<bytecode 0x20fe2d9>)) (f1 lambda nil (interactive) (helm-select-nth-action 0)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (63 . helm-help) (110 . #f(compiled-function () (interactive nil) #<bytecode 0x20fe2b9>)) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-copy-to-buffer) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . helm-execute-selection-action-at-nth-+9) (56 . helm-execute-selection-action-at-nth-+8) (55 . helm-execute-selection-action-at-nth-+7) (54 . helm-execute-selection-action-at-nth-+6) (53 . helm-execute-selection-action-at-nth-+5) (52 . helm-execute-selection-action-at-nth-+4) (51 . helm-execute-selection-action-at-nth-+3) (50 . helm-execute-selection-action-at-nth-+2) (49 . helm-execute-selection-action-at-nth-+1) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-maybe-exit-minibuffer) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-candidates-in-source) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (C-up . helm-follow-action-backward) (C-down . helm-follow-action-forward) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (menu-bar keymap (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "\015" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . minibuffer-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-line-or-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-line-or-history-element) (next . next-history-element) (27 keymap (5 . miniedit) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) nil nil nil t)
  helm-read-pattern-maybe(nil nil nil nil nil nil nil)
  helm-internal((helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found) nil nil nil nil "*helm mini*" nil nil nil)
  apply(helm-internal ((helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found) nil nil nil nil "*helm mini*" nil nil nil))
  helm((helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found) nil nil nil nil "*helm mini*" nil nil nil)
  apply(helm ((helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found) nil nil nil nil "*helm mini*" nil nil nil))
  helm(:sources (helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found) :buffer "*helm mini*" :ff-transformer-show-only-basename nil :truncate-lines t :left-margin-width 0)
  helm-mini()
  funcall-interactively(helm-mini)
  call-interactively(helm-mini nil nil)
  command-execute(helm-mini)

* Bug: On first action after enable spotify/website reply ok & active device.

Had it looking for list memeber when should've been looking for alist assoc. Compounded with a bug in the error print.

** wrong-type-argument symbolp

Debugger entered--Lisp error: (wrong-type-argument symbolp ((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)))
  symbol-name(((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)))
  (error (concat "spotify--api-json-has-field: " "field '%s' unknown for type '%s'. Choose from: %s") field (symbol-name type) type)
  (progn (error (concat "spotify--api-json-has-field: " "field '%s' unknown for type '%s'. Choose from: %s") field (symbol-name type) type))
  (if (not (member field type)) (progn (error (concat "spotify--api-json-has-field: " "field '%s' unknown for type '%s'. Choose from: %s") field (symbol-name type) type)))
  spotify--api-json-get-field(((device spotify--api-device-full) (repeat_state (:boolean "off" string=)) (shuffle_state (:boolean :json-false)) (context :spotify--no-impl) (timestamp :spotify--no-impl) (progress_ms :spotify--no-impl) (is_playing (:boolean :json-false)) (item spotify--api-track-full) (currently_playing_type :spotify--no-impl) (actions :spotify--no-impl)) #<hash-table equal 10/65 0x10e7955> device)
  (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)
  (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)")))
  (if type (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)"))) (error "spotify--api-player-status: if-let failed: %S %S->%S %S" (null json) keyword type "(is keyword in `spotify--keyword->api-field'?)"))
  (let* ((json (and t json)) (type (and json (nth 1 (assoc keyword spotify--keyword->api-field))))) (if type (cond ((eq type 'spotify--api-player-status) (spotify--api-player-status-field json keyword)) ((eq type 'spotify--api-track-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'item) keyword)) ((eq type 'spotify--api-artist-simple) (spotify--api-player-status-field (nth 0 (spotify--api-json-get-field spotify--api-track-full (spotify--api-json-get-field spotify--api-player-status json 'item) 'artists)) keyword)) ((eq type 'spotify--api-device-full) (spotify--api-player-status-field (spotify--api-json-get-field spotify--api-player-status json 'device) keyword)) (t (error "spotify--api-player-status: don't know what to do with keyword: %S %S" keyword "(is it in `spotify--keyword->api-field'?)"))) (error "spotify--api-player-status: if-let failed: %S %S->%S %S" (null json) keyword type "(is keyword in `spotify--keyword->api-field'?)")))
  spotify--api-player-status(#<hash-table equal 10/65 0x10e7955> :volume)
  (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))
  (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true))))
  (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))))
  (if (and (member field-true spotify-player-status-fields) (or (null translate-entry) (eq (nth 0 translate-entry) (nth 1 translate-entry)))) (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true))))))
  (let ((translate-entry (assoc field-true spotify--player-status-translators))) (if (and (member field-true spotify-player-status-fields) (or (null translate-entry) (eq (nth 0 translate-entry) (nth 1 translate-entry)))) (progn (let ((status-n (spotify--cache-get-status-if status-n))) (cond ((null status-n) nil) ((not (null (gethash 'item status-n))) (spotify--api-player-status status-n field-true)) (t (spotify--json-internal-status-field status-n field-true)))))))
  spotify--player-status-field-raw(#<hash-table equal 10/65 0x10e7955> :volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (let* ((status (spotify--normalized-status-type status)) (dictionary (or dictionary spotify--player-status-translators)) (trans-entry (assoc field dictionary)) (field-true (or (nth 1 trans-entry) field)) (value (spotify--player-status-field-raw status field-true dictionary))) (if (not trans-entry) value (spotify--player-status-translate field field-true value dictionary)))
  (if (not (member field spotify-player-status-fields)) (error "spotify--player-status: field '%s' unknown. Choose from: %s" field spotify-player-status-fields) (let* ((status (spotify--normalized-status-type status)) (dictionary (or dictionary spotify--player-status-translators)) (trans-entry (assoc field dictionary)) (field-true (or (nth 1 trans-entry) field)) (value (spotify--player-status-field-raw status field-true dictionary))) (if (not trans-entry) value (spotify--player-status-translate field field-true value dictionary))))
  spotify--player-status-field(#<hash-table equal 10/65 0x10e7955> :volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (let* ((status (spotify--cache-get-status-if nil))) (spotify--player-status-field status field dictionary))
  spotify-player-status-field(:volume ((:artist :artist (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:track :track (lambda (len str) (if (stringp str) (truncate-string-to-width str len 0 nil "...") "")) spotify-player-status-truncate-length) (:duration :duration-millisecond (lambda (fmt ms) (if (numberp ms) (format-seconds fmt (/ ms 1000)) "")) spotify-player-status-duration-format) (:device-active-bool :device-active-state ((t t) (nil nil) (undefined nil) (unsupported nil))) (:shuffling :shuffling-bool ((t spotify-player-status-shuffling-text) (nil spotify-player-status-not-shuffling-text))) (:repeating :repeating-bool ((t spotify-player-status-repeating-text) (nil spotify-player-status-not-repeating-text))) (:playing :playing-bool ((t spotify-player-status-playing-text) (nil spotify-player-status-paused-text))) (:paused :paused-bool ((nil spotify-player-status-paused-text) (t spotify-player-status-playing-text))) (:muted :muted-bool ((t spotify-player-status-muted-text) (nil spotify-player-status-not-muted-text)))))
  (and t (spotify-player-status-field :volume spotify--player-status-translators))
  (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil))
  (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil)))
  (if spotify-cache-player-status-enabled (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil))))
  (condition-case err (if spotify-cache-player-status-enabled (progn (let* ((volume (and t (spotify-player-status-field :volume spotify--player-status-translators)))) (if volume (if (> volume 0) (progn (setq spotify--cache-volume-unmute volume))) nil)))) ((debug error) (message "Spotify status update error: %S" err) nil))
  spotify--controller-status-updated()
  run-hooks(spotify--cache-player-status-hook)
  spotify--player-status-caching-callback((closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) #<hash-table equal 10/65 0x10e7955>)
  (closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status))(#<hash-table equal 10/65 0x10e7955>)
  funcall((closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) #<hash-table equal 10/65 0x10e7955>)
  (progn (funcall callback json))
  (if callback (progn (funcall callback json)))
  (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))
  (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))
  (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))
  (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))))
  (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))
  (closure ((is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") (is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil))))))((:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  apply((closure ((is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") (is-retry) (callback closure ((callback closure (t) (status) (spotify-player-status-refresh-string (spotify--json-api-to-internal status))) t) (status) (spotify--player-status-caching-callback callback status)) (data) (uri . "/me/player") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))) (:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  url-http-activate-callback()
  url-http-chunked-encoding-after-change-function(1518 1523 5)
  url-http-generic-filter(#<process api.spotify.com<10>> "0\015\n\015\n")


* Bug: On first action after enable spotify/website reply ok.

fix: get rid of unused arg in parameters.

** bug: wrong-number-of-arguments

Debugger entered--Lisp error: (wrong-number-of-arguments ((t) (json keyword) "Gets device list from \"/v1/me/player/devices\" endpoint of Spotify Connect API.\n\nJSON must be a json reply formatted hash-table (by json.el) from\nSpotify Connect API. See:\nhttps://developer.spotify.com/documentation/web-api/guides/using-connect-web-api/\n\nReturns list of devices from the json. These will have\n`spotify--api-device-full' fields.\n" (let* ((json (and t json)) (devices (and json (gethash 'devices json)))) (if devices devices nil))) 1)
  spotify--api-devices(#<hash-table equal 1/65 0x21284ad>)
  (and t (spotify--api-devices json))
  (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))
  (closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device))))(#<hash-table equal 1/65 0x21284ad>)
  funcall((closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) #<hash-table equal 1/65 0x21284ad>)
  (progn (funcall callback json))
  (if callback (progn (funcall callback json)))
  (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))
  (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))
  (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))
  (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json)))))))
  (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))
  (closure ((is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") (is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil))))))((:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  apply((closure ((is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") (is-retry) (callback closure (t) (json) (let* ((devices (and t (spotify--api-devices json))) (active (and devices (> (length (seq-filter (function (lambda (dev) (eq (gethash 'is_active dev) t))) devices)) 0)))) (if active (progn (spotify-api-get-player-status (function (lambda (status) (if status (progn (if (spotify--api-player-status status :playing-bool) (spotify-api-pause) (spotify-api-play)))))))) (spotify--feedback--no-device)))) (data) (uri . "/me/player/devices") (method . "GET") t) (_) (toggle-enable-multibyte-characters t) (goto-char (point-min)) (condition-case err (if (search-forward-regexp "^$" nil t) (progn (let* ((json-object-type 'hash-table) (json-array-type 'list) (json-key-type 'symbol) (json (json-read)) (error-json (gethash 'error json))) (kill-buffer) (if (and (hash-table-p error-json) (eq 401 (gethash 'status error-json)) (not is-retry)) (spotify-api-call-async method uri data callback t) (if callback (progn (funcall callback json))))))) (end-of-file (kill-buffer) (if callback (progn (funcall callback nil)))))) (:peer (:certificate (:version 3 :serial-number "03:63:d3:b4:7f:a3:b6:c6:51:c6:c7:37:8d:53:80:2c" :issuer "C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA" :valid-from "2017-05-16" :valid-to "2020-07-29" :subject "C=SE,L=Stockholm,O=Spotify AB,CN=*.spotify.com" :public-key-algorithm "RSA" :certificate-security-level "Medium" :signature-algorithm "RSA-SHA256" :public-key-id "sha1:4b:8e:2b:b6:41:ff:5f:01:48:9b:ac:d3:8f:bd:0a:5c:d9:78:5b:a3" :certificate-id "sha1:ab:bc:7c:9b:7a:d8:5d:98:8b:b2:72:a4:4c:13:47:9a:00:2f:70:b5") :key-exchange "ECDHE-RSA" :protocol "TLS1.2" :cipher "CHACHA20-POLY1305" :mac "AEAD")))
  url-http-activate-callback()
  url-http-chunked-encoding-after-change-function(743 748 5)
  url-http-generic-filter(#<process api.spotify.com<14>> "0\015\n\015\n")
